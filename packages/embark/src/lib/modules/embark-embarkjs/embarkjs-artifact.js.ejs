import EmbarkJS from 'embarkjs';

<% for (let pluginName in (plugins['messages'] || [])) { %>
const __embark<%- pluginName %> = require('<%- plugins['messages'][pluginName] %>');
EmbarkJS.Messages.registerProvider('<%- pluginName %>', __embark<%- pluginName %>.default || __embark<%- pluginName %>);
<% }; %>

<% for (let pluginName in (plugins['storage'] || [])) { %>
const __embark<%- pluginName %> = require('<%- plugins['storage'][pluginName] %>');
EmbarkJS.Storage.registerProvider('<%- pluginName %>', __embark<%- pluginName %>.default || __embark<%- pluginName %>);
<% }; %>

<% for (let pluginName in (plugins['blockchain'] || [])) { %>
const __embark<%- pluginName %> = require('<%- plugins['blockchain'][pluginName] %>');
EmbarkJS.Blockchain.registerProvider('<%- pluginName %>', __embark<%- pluginName %>.default || __embark<%- pluginName %>);
<% }; %>

<% for (let pluginName in (plugins['names'] || [])) { %>
const __embark<%- pluginName %> = require('<%- plugins['names'][pluginName] %>');
EmbarkJS.Names.registerProvider('<%- pluginName %>', __embark<%- pluginName %>.default || __embark<%- pluginName %>);
<% }; %>

<% if (plugins['messages'] && Object.values(plugins['messages']).length > 0) { %>
var communicationConfig = require('./config/communication.json');
EmbarkJS.Messages.setProvider(communicationConfig.provider, communicationConfig.connection);
<% }; %>

<% if (plugins['storage'] && Object.values(plugins['storage']).length > 0) { %>
var storageConfig = require('./config/storage.json');
EmbarkJS.Storage.setProviders(storageConfig.dappConnection);
<% }; %>

<% if (plugins['blockchain'] && Object.values(plugins['blockchain']).length > 0) { %>
var blockchainConfig = require('./config/blockchain.json');
EmbarkJS.Blockchain.setProvider(blockchainConfig.provider, {});
EmbarkJS.Blockchain.connect(blockchainConfig, (err) => {if (err) { console.error(err); } });
<% }; %>

<% if (plugins['names'] && Object.values(plugins['names']).length > 0) { %>
var namesConfig = require('./config/namesystem.json');
console.dir(namesConfig);
EmbarkJS.Names.setProvider(namesConfig.provider, namesConfig);
<% }; %>

export default EmbarkJS;
